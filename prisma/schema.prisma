// This is your Prisma schema file for the Moodle Clone LMS
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  taughtCourses     Course[]     @relation("CourseInstructor")
  enrollments       Enrollment[]
  assignments       Assignment[]
  submissions       Submission[]
  grades            Grade[]
  announcements     Announcement[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  coverImage  String?
  credits     Int      @default(3)
  capacity    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  instructorId String
  instructor   User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  assignments  Assignment[]
  announcements Announcement[]
  schedule     CourseSchedule?
  requirements CourseRequirement[]

  @@map("courses")
}

model CourseSchedule {
  id        String @id @default(cuid())
  courseId  String @unique
  dayOfWeek Int    // 0 = Sunday, 1 = Monday, etc.
  startTime String // Format: "HH:MM"
  endTime   String // Format: "HH:MM"
  room      String?

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("course_schedules")
}

model Enrollment {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  enrolledAt DateTime @default(now())

  // Relations
  student User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model Assignment {
  id          String    @id @default(cuid())
  courseId    String
  title       String
  description String
  dueDate     DateTime
  maxPoints   Int       @default(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instructor  User        @relation(fields: [instructorId], references: [id])
  instructorId String
  submissions Submission[]
  grades      Grade[]

  @@map("assignments")
}

model Submission {
  id           String    @id @default(cuid())
  assignmentId String
  studentId    String
  content      String
  submittedAt  DateTime  @default(now())

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  grade      Grade?

  @@unique([assignmentId, studentId])
  @@map("submissions")
}

model Grade {
  id           String    @id @default(cuid())
  assignmentId String
  studentId    String
  points       Int
  maxPoints    Int
  feedback     String?
  gradedAt     DateTime  @default(now())

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  submission Submission? @relation(fields: [submissionId], references: [id])
  submissionId String?   @unique

  @@unique([assignmentId, studentId])
  @@map("grades")
}

model Announcement {
  id        String   @id @default(cuid())
  courseId  String
  title     String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id])

  @@map("announcements")
}

model DegreeProgram {
  id          String   @id @default(cuid())
  name        String
  description String?
  totalCreditsRequired Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  requirements DegreeRequirement[]

  @@map("degree_programs")
}

model DegreeRequirement {
  id                String   @id @default(cuid())
  degreeProgramId   String
  category          String
  categoryName      String
  description       String?
  requiredCredits   Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  degreeProgram DegreeProgram @relation(fields: [degreeProgramId], references: [id], onDelete: Cascade)
  courses       CourseRequirement[]

  @@map("degree_requirements")
}

model CourseRequirement {
  id                   String @id @default(cuid())
  degreeRequirementId  String
  courseId             String

  // Relations
  degreeRequirement DegreeRequirement @relation(fields: [degreeRequirementId], references: [id], onDelete: Cascade)
  course            Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([degreeRequirementId, courseId])
  @@map("course_requirements")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}